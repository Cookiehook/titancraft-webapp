"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 3.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import base64
import logging
import os
from pathlib import Path

import boto3

logger = logging.getLogger()
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-r6%71ijpmv2v^3e=jivrnx_gebftmt+wj-w9wiseszv74f@*!k'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []
INSTALLED_APPS = [
    'app.apps.AppConfig',
    'markdownify.apps.MarkdownifyConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project.wsgi.application'

# https://docs.djangoproject.com/en/3.2/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME', 'postgres'),
        'USER': os.getenv('DB_USER', 'postgres'),
        'PASSWORD': os.getenv('DB_PASSWORD', 'bob'),
        'HOST': os.getenv('DB_HOST', '127.0.0.1'),
        'PORT':  os.getenv('DB_PORT', '5432')
    }
}


# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]
LOGIN_URL = '/auth/login'

# https://docs.djangoproject.com/en/3.2/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True

# https://docs.djangoproject.com/en/3.2/howto/static-files/
STATIC_ROOT = os.path.join(BASE_DIR, 'static/')
STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'DEBUG',
    },
}

MARKDOWNIFY = {
    "default": {
        "WHITELIST_TAGS": [
            'a',
            'abbr',
            'acronym',
            'b',
            'blockquote',
            'em',
            'i',
            'li',
            'ol',
            'p',
            'strong',
            'ul',
            'h1', 'h2', 'h3', 'h4', 'h5', 'h6'
        ]
    }
}

def get_secret(secret_name):
    # Used when running on developer machine
    if secret := os.getenv(secret_name):
        logger.info(f"Retrieving {secret_name} secret from env vars")
        return secret

    # Used when running inside docker-compose network
    if os.path.exists(f"/run/secrets/{secret_name}"):
        logger.info(f"Retrieving {secret_name} secret from secret file")
        with open(f"/run/secrets/{secret_name}") as sfile:
            return sfile.read()

    # Used when deployed to AWS
    logger.info(f"Retrieving {secret_name} secret from secret manager")
    session = boto3.session.Session()
    client = session.client(
        service_name='secretsmanager',
        region_name="eu-west-2"
    )

    get_secret_value_response = client.get_secret_value(SecretId=secret_name)
    logger.debug(f"Secret '{secret_name}' = {get_secret_value_response}")
    if 'SecretString' in get_secret_value_response:
        return get_secret_value_response['SecretString']
    else:
        return base64.b64decode(get_secret_value_response['SecretBinary'])


DISCORD_TITANCRAFT_CLIENT_ID = None
DISCORD_TITANCRAFT_CLIENT_SECRET = None


# Only load secrets when required. Otherwise manage.py collecstatic fails,
# as the secrets aren't available during the build process.
def get_discord_client_id():
    global DISCORD_TITANCRAFT_CLIENT_ID
    if DISCORD_TITANCRAFT_CLIENT_ID is None:
        DISCORD_TITANCRAFT_CLIENT_ID = get_secret('DISCORD_TITANCRAFT_CLIENT_ID')
    return DISCORD_TITANCRAFT_CLIENT_ID


def get_discord_client_secret():
    global DISCORD_TITANCRAFT_CLIENT_SECRET
    if DISCORD_TITANCRAFT_CLIENT_SECRET is None:
        DISCORD_TITANCRAFT_CLIENT_SECRET = get_secret('DISCORD_TITANCRAFT_CLIENT_SECRET')
    return DISCORD_TITANCRAFT_CLIENT_SECRET
